<?php

/*  --------------------------------------------------------------------------
 * Formulier om lid of abonnee te worden op SP.nl
 * - Integreert met CiviCRM op een andere server via de API
 * - CiviCRM-instellingen en welkomstcadeaus zijn te configureren via de admin
 * kevin@levity.nl, 2014
 * -------------------------------------------------------------------------- */

// Implements hook_menu
function spaanmelden_menu() {

    $items = [];

    $items['aanmelden/lid'] = [
        'title'           => 'Lid worden',
        'type'            => MENU_SUGGESTED_ITEM,
        'page callback'   => 'spaanmelden_page_lid',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-lid.inc',
    ];

    $items['aanmelden/rood'] = [
        'title'           => 'Lid worden van ROOD',
        'type'            => MENU_SUGGESTED_ITEM,
        'page callback'   => 'spaanmelden_page_rood',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-rood.inc',
    ];

    $items['aanmelden/tribune'] = [
        'title'           => 'Abonnee op de Tribune worden',
        'type'            => MENU_SUGGESTED_ITEM,
        'page callback'   => 'spaanmelden_page_tribune',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-tribune.inc',
    ];

    $items['aanmelden/spanning'] = [
        'title'           => 'Abonnee op de Spanning worden',
        'type'            => MENU_SUGGESTED_ITEM,
        'page callback'   => 'spaanmelden_page_spanning',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-spanning.inc',
    ];

    $items['aanmelden/intern'] = [
        'title'           => 'Snel aanmelden (intern formulier)',
        'type'            => MENU_SUGGESTED_ITEM,
        'page callback'   => 'spaanmelden_page_intern',
        'access callback'  => 'user_access',
        'access arguments' => ['access internal signup form'],
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-intern.inc',
    ];

    $items['aanmelden/bedankt'] = [
        'title'           => 'Bedankt voor je aanmelding',
        'type'            => MENU_CALLBACK,
        'page callback'   => 'spaanmelden_page_thanks',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-actions.inc',
    ];

    $items['aanmelden/fout'] = [
        'title'           => 'Er is een fout opgetreden',
        'type'            => MENU_CALLBACK,
        'page callback'   => 'spaanmelden_page_error',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-actions.inc',
    ];

    $items['aanmelden/bevestig/%'] = [
        'title'           => 'Aanmelding bevestigen',
        'type'            => MENU_CALLBACK,
        'page callback'   => 'spaanmelden_page_validate',
        'page arguments'  => [2],
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-actions.inc',
    ];

    /* Postcode-lookup, voor nu via ajax
    $items['aanmelden/postcode'] = array(
        'title'           => 'Postcode-lookup via ajax',
        'type'            => MENU_CALLBACK,
        'page callback'   => 'spaanmelden_page_postcode',
        'access callback' => true,
        'menu_name'       => 'main-menu',
        'file'            => 'spaanmelden.page-actions.inc',
    );
    */


    $items['admin/config/sp/aanmelden'] = [
        'title'            => 'Aanmeldformulieren',
        'description'      => 'Aanmeldingen bekijken en de formulieren instellen.',
        'type'             => MENU_NORMAL_ITEM,
        'page callback'    => 'spaanmelden_view_submissions',
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
    ];

    $items['admin/config/sp/aanmelden/submissions'] = [
        'title'            => 'Inschrijvingen',
        'type'             => MENU_DEFAULT_LOCAL_TASK,
        'access callback'  => 'user_access',
        'access arguments' => ['access pending submissions'],
        'weight'           => -2,
    ];

    $items['admin/config/sp/aanmelden/submission/%'] = [
        'title'            => 'Inschrijving bekijken',
        'type'             => MENU_CALLBACK,
        'page callback'    => 'spaanmelden_submission_details',
        'page arguments'   => [5],
        'access callback'  => 'user_access',
        'access arguments' => ['access pending submissions'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => -1,
    ];

    $items['admin/config/sp/aanmelden/gifts'] = [
        'title'            => 'Welkomstgeschenken',
        'type'             => MENU_LOCAL_TASK,
        'page callback'    => 'spaanmelden_gifts_view',
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 1,
    ];

    $items['admin/config/sp/aanmelden/gifts/edit'] = [
        'title'            => 'Geschenk toevoegen',
        'type'             => MENU_CALLBACK,
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['spaanmelden_gifts_form'],
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 2,
    ];

    $items['admin/config/sp/aanmelden/gifts/edit/%'] = [
        'title'            => 'Geschenk bewerken',
        'type'             => MENU_CALLBACK,
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['spaanmelden_gifts_form', 6],
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 3,
    ];

    $items['admin/config/sp/aanmelden/texts'] = [
        'title'            => 'Teksten',
        'description'      => 'Teksten voor de aanmeldformulieren',
        'type'             => MENU_LOCAL_TASK,
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['spaanmelden_admin_texts_form'],
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 11,
    ];

    $items['admin/config/sp/aanmelden/settings'] = [
        'title'            => 'Instellingen',
        'description'      => 'Instellingen voor de aanmeldformulieren',
        'type'             => MENU_LOCAL_TASK,
        'page callback'    => 'drupal_get_form',
        'page arguments'   => ['spaanmelden_admin_settings_form'],
        'access callback'  => 'user_access',
        'access arguments' => ['administer signup forms'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 12,
    ];

    $items['admin/config/sp/aanmelden/submit'] = [
        'title'            => 'Wachtende inschrijvingen verwerken',
        'type'             => MENU_CALLBACK,
        'page callback'    => 'spaanmelden_admin_submit_pending',
        'access callback'  => 'user_access',
        'access arguments' => ['access pending submissions'],
        'file'             => 'spaanmelden.page-admin.inc',
        'weight'           => 13,
    ];

    return $items;
}

// Implements hook_permission
function spaanmelden_permission() {
    return [
        'administer signup forms' =>
            ['title'       => t('Aanmeldformulieren beheren'),
                  'description' => t('Beheer instellingen en welkomstgeschenken voor de aanmeldformulieren.'),
            ],
        'access pending submissions' =>
            ['title'       => t('Wachtende aanmeldingen bekijken'),
                  'description' => t('Bekijk en synchroniseer wachtende aanmeldingen.'),
            ],
        'access internal signup form' =>
            ['title'       => t('Intern aanmeldformulier'),
                  'description' => t('Toegang tot intern aanmeldformulier.'),
            ],
    ];
}

// Implements hook_theme
function spaanmelden_theme($existing, $type, $theme, $path) {
    return [
        'spaanmelden_progress' => [
            'template'  => 'spaanmelden-progress',
            'variables' => ['steps' => [], 'active_step' => null],
        ],
        'aanmelden_page'       => [
            'template'       => 'spaanmelden-page',
            'render element' => 'element',
        ],
    ];
}

// Implements hook_mail
function spaanmelden_mail($key, &$message, $params) {
    switch ($key) {
        case 'verificatie':
            _spaanmelden_get_mail($message, $params);
            break;
        case 'reminder':
            _spaanmelden_get_reminder_mail($message, $params);
            break;
    }
}

// Implements hook_cron
function spaanmelden_cron() {

    $lastrun = variable_get('spaanmelden_cron_lastrun');
    if($lastrun < (time() - 3600)) {
        variable_set('spaanmelden_cron_lastrun', time());
        spaanmelden_submit_pending();
        spaanmelden_send_reminders();
    }
}

// Functies om record toe te voegen in sp_aanmeldingen en een e-mailadres te valideren

function _spaanmelden_insert_entry($params) {
    $params['created'] = time();
    return db_insert('sp_aanmeldingen')
        ->fields($params)
        ->execute();
}

function _spaanmelden_get_hash($membership_type, $lastname, $email) {
    return md5($membership_type . $lastname . $email . time());
}

function _spaanmelden_get_mail(&$message, $params) {

    if(!$params['hash'] || !$params['membership_type'] || !$params['form_state'])
        throw new \Exception('Params hash, membership_type or form_state missing.');

    $tables = _spaanmelden_format_tables($params['membership_type'], $params['form_state']);
    $descr = _spaanmelden_membership_description($params['membership_type']);

    global $base_url;
    $validate_url = $base_url . '/aanmelden/bevestig/' . $params['hash'];

    $message['subject'] = 'Bevestig je aanmelding als ' . $descr;
    $message['body'] = [];
    $message['body'][] = '<p>Bedankt voor je aanmelding als ' . $descr . '!<br />Klik op onderstaande link om je aanmelding te bevestigen. Als je niets doet wordt je aanmelding vanzelf verwijderd.</p>';
    $message['body'][] = '<p>' . l($validate_url, $validate_url) . '</p>';
    $message['body'][] = drupal_render($tables);
    $message['body'][] = _spaanmelden_get_qline();
}

function _spaanmelden_get_reminder_mail(&$message, $params) {

    if(!$params['hash'] || !$params['membership_type'])
        throw new \Exception('Params hash or membership_type missing.');

    $descr = _spaanmelden_membership_description($params['membership_type']);

    global $base_url;
    $validate_url = $base_url . '/aanmelden/bevestig/' . $params['hash'];

    $message['subject'] = 'Herinnering: bevestig je aanmelding als ' . $descr;
    $message['body'] = [];
    $message['body'][] = '<p>Gisteren heb je je aangemeld als ' . $descr . '.<br />Je hebt je aanmelding echter nog niet bevestigd. Klik op onderstaande link om je aanmelding te bevestigen en deze door te geven aan de SP-ledenadministratie.</p>';
    $message['body'][] = '<p>' . l($validate_url, $validate_url) . '</p>';
    $message['body'][] = _spaanmelden_get_qline();
}

// Functies voor opmaak mails/pagina's, grotendeels van github.com/spwebteam

function _spaanmelden_membership_description($membership_type, $short = false) {
    switch ($membership_type) {
        case 'lid_sp':
            return ($short ? 'SP' : 'lid van de SP');
        case 'lid_sprood':
            return ($short ? 'SP + ROOD' : 'lid van de SP en ROOD');
        case 'lid_rood':
            return ($short ? 'ROOD' : 'lid van ROOD');
        case 'tribune':
            return ($short ? 'Tribune' : 'abonnee van de Tribune');
        case 'spanning':
            return ($short ? 'Spanning' : 'abonnee van Spanning');
        default:
            return '[' . ($short ? 'onbekend' : 'onbekend lidmaatschap') . ']';
    }
}

function _spaanmelden_fieldset_table($fieldset, $keys = false) {
    $rows = [];
    if($keys === false) {
        $keys = element_children($fieldset);
    }

    foreach ($keys as $key) {
        $element = $fieldset[$key];
        if(isset($element['#access']) && empty($element['#access'])) {
            continue;
        }

        if(isset($element['#type'])) {
            switch ($element['#type']) {
                case 'textfield':
                case 'numberfield':
                case 'emailfield':
                case 'telfield':
                    $rows[check_plain($element['#title'])] = check_plain($element['#default_value']);
                    break;
                case 'select':
                case 'radios':
                    if(!empty($element['#option_groups'])) {
                        $groups = $element['#option_groups'];
                        $_groups = [];
                        foreach ($groups as $label => $keys) {
                            foreach ($keys as $k) {
                                $_groups[$k] = $label;
                            }
                        }

                        if(!empty($_groups[$element['#default_value']])) {
                            $rows[check_plain($element['#title'])] = check_plain($_groups[$element['#default_value']]) . ' ' . $element['#options'][$element['#default_value']];
                        } else {
                            $rows[check_plain($element['#title'])] = $element['#options'][$element['#default_value']];
                        }
                    } else {
                        $rows[check_plain($element['#title'])] = $element['#options'][$element['#default_value']];
                    }
                    break;
            }
        }
    }

    return $rows;
}

function _spaanmelden_format_tables($membership_type, &$form_state) {
    switch ($membership_type) {
        case 'tribune':
            $steps = spaanmelden_form_tribune_form_steps();
            break;
        case 'spanning':
            $steps = spaanmelden_form_spanning_form_steps();
            break;
        case 'lid_rood':
            $steps = spaanmelden_form_rood_form_steps();
            break;
        default:
            $steps = spaanmelden_form_lid_form_steps();
            break;
    }

    $tables = [];

    foreach ($steps as $key => $_info) {
        $callback = $_info['callback'] . '_tables';

        if(function_exists($callback)) {
            $callback($tables, $form_state);
        }
    }

    foreach ($tables as $label => $rows) {
        $_rows = [];
        foreach ($rows as $key => $value) {
            $_rows[] = [
                ['header' => true, 'data' => $key],
                ['data' => $value],
            ];
        }

        $result[] = [
            'title' => ['#markup' => '<h3 class="h2">' . $label . '</h3>'],
            'info'  => ['#theme' => 'table', '#rows' => $_rows],
        ];
    }

    return $result;
}

function _spaanmelden_form_default_value($form_state, $parents, $default_value = '') {
    if(!isset($form_state['storage']['data'])) {
        return $default_value;
    }

    $value = drupal_array_get_nested_value($form_state['storage']['data'], $parents);
    if(!isset($value)) {
        return $default_value;
    }

    return $value;
}

function _spaanmelden_form_is_incasso(&$form_state) {
    $paymentMethod = drupal_array_get_nested_value($form_state, ['values', 'payment', 'payment_method']);
    return ($paymentMethod == 'incasso');
}

function _spaanmelden_get_qline() {
    return '<p>Voor verdere vragen over je aanmelding kun je contact opnemen met de
            ledenadministratie: 088-243 55 40 of <a href="mailto:administratie@sp.nl">administratie@sp.nl</a>.</p>';
}

// From: http://monshouwer.org/code-snipets/check-iban-bank-account-number-in-php/
function _spaanmelden_check_iban($iban) {
    // Normalize input (remove spaces and make upcase)
    $iban = strtoupper(str_replace(' ', '', $iban));

    if(preg_match('/^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$/', $iban)) {
        $country = substr($iban, 0, 2);
        $check = intval(substr($iban, 2, 2));
        $account = substr($iban, 4);

        // To numeric representation
        $search = range('A', 'Z');
        foreach (range(10, 35) as $tmp)
            $replace[] = strval($tmp);
        $numstr = str_replace($search, $replace, $account . $country . '00');

        // Calculate checksum
        $checksum = intval(substr($numstr, 0, 1));
        for ($pos = 1; $pos < strlen($numstr); $pos++) {
            $checksum *= 10;
            $checksum += intval(substr($numstr, $pos, 1));
            $checksum %= 97;
        }

        return ((98 - $checksum) == $check);
    } else
        return false;
}

// Herinneringsmails sturen aan aanmelders die nog niet bevestigd hebben
function spaanmelden_send_reminders() {

    $unverified = db_select('sp_aanmeldingen', 's')
        ->fields('s')
        ->condition('created', time() - 86400, '<')
        ->isNull('verified')
        ->isNull('reminded')
        ->execute();

    if($unverified) {

        while ($record = $unverified->fetchAssoc()) {

            $mail = drupal_mail(
                'spaanmelden', 'reminder', $record['email'], LANGUAGE_NONE,
                [
                    'hash'            => $record['hash'],
                    'membership_type' => $record['membership_type'],
                    'format'          => SWIFTMAILER_FORMAT_HTML,
                ]
            );

            if(!empty($mail['send'])) {

                db_update('sp_aanmeldingen')
                    ->fields([
                        'reminded' => time(),
                    ])
                    ->condition('id', $record['id'])
                    ->execute();
            }
        }
    }
}

// Koppeling met CiviCRM

// Voer de wachtende inschrijvingen in CiviCRM in (aangeroepen vanuit cron)
function spaanmelden_submit_pending() {

    $pending = db_select('sp_aanmeldingen', 's')
        ->fields('s')
        ->isNotNull('verified')
        ->isNull('submitted')
        ->execute();

    if($pending) {
        while ($record = $pending->fetchAssoc()) {

            try {
                $contact_id = _spaanmelden_add_membership($record);
                $error = null;
            } catch (\Exception $e) {
                $error = $e->getMessage();
                $contact_id = null;
            }

            db_update('sp_aanmeldingen')
                ->fields([
                    'submitted'  => time(),
                    'errormsg'   => $error,
                    'contact_id' => $contact_id,
                ])
                ->condition('id', $record['id'])
                ->execute();
        }
    }
    return true;
}

// Cache resultaten van lookups (bijv ID's en welkomstcadeaus), standaard voor 8 uur
function _spaanmelden_cache_data($cacheName, $callback, $limit = 28800) {
    $data = cache_get($cacheName);
    if($data)
        return $data->data;

    if(is_callable($callback)) {
        $data = call_user_func($callback);
        if($data)
            cache_set($cacheName, $data, 'cache', $limit);
        return $data;
    }

    return false;
}

// Haal de ID op die bij het locatietype 'Thuis' hoort
function _spaanmelden_get_location_type_id() {

    return _spaanmelden_cache_data('spaanmelden_location_type', function () {

        $api = spciviapi_get_api();
        try {
            $api->LocationType->Get([
                'name' => 'Thuis',
            ]);
            $lt = $api->result();
            if($lt)
                return $lt->id;

        } catch (\Exception $e) {
            return false;
        }
    });
}

// Haal een lijst van landcodes en country ID's op
function _spaanmelden_get_country_ids() {

    return _spaanmelden_cache_data('spaanmelden_country_ids', function () {

        $api = spciviapi_get_api();
        try {
            $api->Constant->Get([
                'name'       => 'countryIsoCode',
                'sequential' => 0,
            ]);
            $codes = $api->result();
            if($codes)
                return (array)$codes->values;

        } catch (\Exception $e) {
            return false;
        }
    });
}

// Haal een lijst van welkomstcadeaus voor het SP- of ROOD-lidmaatschap op
function _spaanmelden_get_gifts($groupName) {

    $gifts = db_select('sp_aanmeldingen_gifts', 'sg')
        ->fields('sg')
        ->condition('membership_type', $groupName, '=')
        ->orderBy('position', 'ASC')
        ->execute()
        ->fetchAll();

    $ret = [];
    if($gifts) {
        foreach ($gifts as $g) {
            $ret[$g->id] = $g->name;
        }
    }

    return $ret;
}

function _spaanmelden_get_gift_internal_name($giftId) {
    return db_select('sp_aanmeldingen_gifts', 'sg')
        ->fields('sg', ['internal_name'])
        ->condition('id', $giftId, '=')
        ->execute()
        ->fetchField(0);
}

// Haal een lijst van mogelijke bronnen op (quick and dirty uit de database)
function _spaanmelden_get_source_options() {

    $sourceField = variable_get('spaanmelden_id_custom_source');
    $q = db_select('civicrm_option_value', 'cov')
        ->fields('cov', ['label','value'])
        ->condition('ccf.id', str_replace('custom_','',$sourceField), '=')
        ->orderBy('cov.weight');
    $q->join('civicrm_custom_field', 'ccf', 'ccf.option_group_id=cov.option_group_id');
    $sources = $q->execute()->fetchAll();

    $ret = [];
    if($sources) {
        $ret[] = 'Kies...';
        foreach($sources as $s) {
            $ret[$s->value] = $s->label;
        }
    }

    return $ret;
}

// Haal de ID van de bron Website op
function _spaanmelden_get_source_website() {

    $sources = _spaanmelden_get_source_options();
    if(in_array('Website', $sources)) {
        return array_search('Website', $sources);
    }
    return '';
}

// Doe een postcode-lookup op basis van postcode en huisnummer (API-method van Jaap voor Pro6pp)
function _spaanmelden_postcode_lookup($postcode, $huisnummer) {

    $api = spciviapi_get_api();
    $api->PostcodeNL->get([
        'postcode'   => $postcode,
        'huisnummer' => $huisnummer,
    ]);
    $res = $api->result();

    if($res && !$res->is_error && count($res->values) > 0) {
        return array_shift($res->values);
    }
    return [];
}

// Dubbelen-check voor intern aanmeldformulier
function _spaanmelden_doubles_check($postcode, $huisnummer) {

    $api = spciviapi_get_api();
    $api->Address->Get([
        'postal_code' => $postcode,
        'housenumber' => $huisnummer,
    ]);
    $addressCheck = $api->result();
    if ($addressCheck && $addressCheck->count > 0) {
        $records = [];
        foreach ($addressCheck->values as $record) {
            $api->Contact->Getsingle([
                'contact_id' => $record->contact_id,
            ]);
            $contactChk = $api->result();
            if ($contactChk && !$contactChk->is_error)
                $records[] = '<a href="/civicrm/contact/view/?cid=' . $contactChk->contact_id . '">' . $contactChk->contact_id . ' ' . $contactChk->display_name . '</a>';
        }

        return $records;
    }

    return false;
}

// Dubbelen-check voor intern aanmeldformulier op basis van emailadres
function _spaanmelden_doubles_check_email($email) {

    $api = spciviapi_get_api();
    $api->Email->Get([
        'email' => $email,
    ]);
    $emailCheck = $api->result();
    if ($emailCheck && $emailCheck->count > 0) {

        $records = [];
        foreach ($emailCheck->values as $record) {
            $api->Contact->Getsingle([
                'contact_id' => $record->contact_id,
            ]);
            $contactChk = $api->result();
            if ($contactChk && !$contactChk->is_error)
                $records[] = '<a href="/civicrm/contact/view/?cid=' . $contactChk->contact_id . '">' . $contactChk->contact_id . ' ' . $contactChk->display_name . '</a>';
        }

        return $records;
    }

    return false;
}

// Voeg een nieuw contact toe aan CiviCRM, inclusief een lidmaatschap of abonnement
function _spaanmelden_add_membership($data = []) {

    // Gender-waardes: magic numbers, maar deze veranderen *echt* vrijwel nooit...
    switch ($data['gender']) {
        case 'v':
            $gender = 1;
            break;
        case 'm':
            $gender = 2;
            break;
        case 'a':
            $gender = 3;
            break;
        default:
            $gender = null;
            break;
    }

    // Create contact
    $contactData = [
        'contact_type' => 'Individual',
        'first_name'   => $data['firstname'],
        'middle_name'  => $data['middlename'],
        'last_name'    => $data['lastname'],
        'display_name' => ($data['firstname'] ? $data['firstname'] : $data['initials']) . '+' . ($data['middlename'] ? $data['middlename'] . '+' : '') . $data['lastname'],
        'birth_date'   => $data['birthdate'],
        'gender_id'    => $gender,
    ];

    if($data['initials']) {
        $spInitialsField = variable_get('spaanmelden_id_custom_initials');
        $contactData[$spInitialsField] = $data['initials'];
    }

    $contactSourceField = variable_get('spaanmelden_id_custom_source');
    if($data['source']) {
        $contactData[$contactSourceField] = $data['source'];
    } else {
        $contactData[$contactSourceField] = _spaanmelden_get_source_website();
    }

    $api = spciviapi_get_api();
    $api->Contact->create($contactData);
    $res = $api->result();
    if(!$res || $res->is_error || !$res->id) {
        throw new \Exception('CiviCRM API error (Contact): ' . $res->error_message);
        return null;
    }

    // Get contact ID and location type ID
    $contact_id = $res->id;
    $locationTypeId = _spaanmelden_get_location_type_id();

    // Get country ID
    $countryId = array_search($data['country'], _spaanmelden_get_country_ids());

    // Add home address
    $api->Address->create([
        'contact_id'           => $contact_id,
        'is_primary'           => 1,
        'location_type_id'     => $locationTypeId,
//        'street_address'       => $data['street'] . ' ' . $data['housenumber'] . $data['housenumber_suffix'],
//        'street_parsing'       => 1,
        'street_name'          => $data['street'],
        'street_number'        => $data['housenumber'],
        'street_unit'          => $data['housenumber_suffix'],
        'city'                 => $data['city'],
        'postal_code'          => $data['zipcode'],
        'country_id'           => $countryId,
    ]);
    $res = $api->result();
    if(!$res || $res->is_error) {
        throw new \Exception('CiviCRM API error (Address): ' . $res->error_message);
    }

    // Add email address
    if($data['email']) {
        $api->Email->create([
            'contact_id'       => $contact_id,
            'email'            => $data['email'],
            'location_type_id' => $locationTypeId,
        ]);
        $res = $api->result();
        if (!$res || $res->is_error) {
            throw new \Exception('CiviCRM API error (Email): ' . $res->error_message);
        }
    }

    // Add phone number(s)
    if($data['phone']) {

        $api->Phone->create([
            'contact_id'       => $contact_id,
            'phone'            => $data['phone'],
            'location_type_id' => $locationTypeId,
            'phone_type_id'    => 1, // Staan deze vast? Zie geen lookup-tabel
        ]);
        $res = $api->result();
        if(!$res || $res->is_error) {
            throw new \Exception('CiviCRM API error (Phone): ' . $res->error_message);
        }
    }
    if($data['phone_mobile']) {

        $api->Phone->create([
            'contact_id'       => $contact_id,
            'phone'            => $data['phone_mobile'],
            'location_type_id' => $locationTypeId,
            'phone_type_id'    => 2,
        ]);
        $res = $api->result();
        if(!$res || $res->is_error) {
            throw new \Exception('CiviCRM API error (Mobile): ' . $res->error_message);
        }
    }

    // Add membership
    switch ($data['membership_type']) {

        case 'lid_sp':
            $membershipTypeId = variable_get('spaanmelden_id_lid_sp');
			$financialTypeId = variable_get('spaanmelden_id_fintype_sp');
			$contribution = $data['contribution'];
            if($data['payment_method'] != 'incasso')
                $contribution += 1;
            break;
        case 'lid_sprood':
            $membershipTypeId = variable_get('spaanmelden_id_lid_sprood');
			$financialTypeId = variable_get('spaanmelden_id_fintype_sprood');
	        $contribution = $data['contribution'];
            if($data['payment_method'] != 'incasso')
                $contribution += 1;
            break;
        case 'lid_rood':
            $membershipTypeId = variable_get('spaanmelden_id_lid_rood');
            $financialTypeId = variable_get('spaanmelden_id_fintype_rood');
            $contribution = round($data['contribution'] / 4, 2);
            break;
        case 'tribune':
            $membershipTypeId = variable_get('spaanmelden_id_abo_tribune');
			$financialTypeId = variable_get('spaanmelden_id_fintype_tribune');
	        $contribution = ($data['payment_method'] == 'incasso') ? 5 : 6;
            break;
        case 'spanning':
            $membershipTypeId = variable_get('spaanmelden_id_abo_spanning');
			$financialTypeId = variable_get('spaanmelden_id_fintype_spanning');
	        $contribution = 6;
            break;
	    default:
		    throw new \Exception('CiviCRM API error: invalid membership type: ' . $data['membership_type'] . '.');
		    break;
    }

	if($data['payment_method'] == 'incasso') {
		$paymentInstrument = variable_get('spaanmelden_id_payment_incasso');
	} else {
		$paymentInstrument = variable_get('spaanmelden_id_payment_accept');
	}

	$membershipData = [
		'contact_id'             => $contact_id,
		'membership_type_id'     => $membershipTypeId,
		'membership_start_date'  => date('Ymdhis', $data['verified']),
		'join_date'              => date('Ymdhis', $data['verified']),
		'is_override'            => 1,
		'status_id'              => variable_get('spaanmelden_id_status'),
		'total_amount'           => $contribution,
		'financial_type_id'      => $financialTypeId,
		'contribution_status_id' => 2, // Pending
		'payment_instrument_id'  => $paymentInstrument,
	    'new_mandaat'            => 0,
	    'iban'                   => $data['bank_account'],
	];
	if($data['payment_method'] == 'incasso' && $data['bank_account']) {
		$membershipData['new_mandaat'] = 1;
		$membershipData['mandaat_status'] = 'NEW';
		$membershipData['mandaat_datum'] = date('Ymdhis', $data['verified']);
		$membershipData['mandaat_plaats'] = $data['city'];
	}

    if(in_array($data['membership_type'], ['lid_sp', 'lid_sprood'])) {
        $spGiftField = variable_get('spaanmelden_id_custom_gift_sp');
        $membershipData[$spGiftField] = _spaanmelden_get_gift_internal_name($data['welcome_present_sp']);

        $spGiftFieldReceived = variable_get('spaanmelden_id_custom_gift_sp_received');
        $membershipData[$spGiftFieldReceived] = 0;
    }
    if(in_array($data['membership_type'], ['lid_sprood', 'lid_rood'])) {
        $roodGiftField = variable_get('spaanmelden_id_custom_gift_rood');
        $membershipData[$roodGiftField] = _spaanmelden_get_gift_internal_name($data['welcome_present_rood']);

        $roodGiftFieldReceived = variable_get('spaanmelden_id_custom_gift_rood_received');
        $membershipData[$roodGiftFieldReceived] = 0;
    }

    $membershipSourceField = variable_get('spaanmelden_id_custom_source_membership');
    if($data['source']) {
        $membershipData[$membershipSourceField] = $data['source'];
    } else {
        $membershipData[$membershipSourceField] = _spaanmelden_get_source_website();
    }

    $api->Membership->spcreate($membershipData);
    $res = $api->result();

    if(!$res || $res->is_error) {
        throw new \Exception('CiviCRM API error (Membership): ' . $res->error_message . ' ' . print_r($membershipData, true));
    }

    // Add activity record
    $data['submitted'] = time();
    $activityData = '';
    foreach ($data as $key => $value) {
        list($key, $value) = _spaanmelden_friendly_field_data($key, $value, true);
        if($key)
            $activityData .= $key . ': ' . $value . '<br />';
    }

    $api->Activity->Create([
        'source_contact_id'  => variable_get('spaanmelden_id_activity_contact'),
        'target_contact_id'  => $contact_id,
        'activity_name'      => variable_get('spaanmelden_id_activity'),
        'activity_subject'   => 'Aanmelding als ' . _spaanmelden_membership_description($data['membership_type']),
        'activity_date_time' => date('YmdHis', $data['verified']),
        'details'            => 'De volgende aanmelding is via de website ontvangen op ' . date('d-m-Y H:i:s', $data['created']) . ' en bevestigd op ' . date('d-m-Y H:i:s', $data['verified']) . ':<br /><br />' . $activityData,
    ]);
    $res = $api->result();
    if(!$res || $res->is_error) {
        throw new \Exception('CiviCRM API error (Activity): ' . $res->error_message);
    }

    return $contact_id;
}

function _spaanmelden_friendly_field_data($key, $value, $activity = false) {
    switch ($key) {
        case 'hash':
            return [null, null];
        case 'errormsg':
            if($value != '')
                return ['Error', '<span style="color:#f00;font-weight:bold;">' . $value . '</span>'];
            return [null, null];
        case 'id':
            return ['Website-ID', $value];
        case 'membership_type':
            return ['Lidmaatschapstype', _spaanmelden_membership_description($value, true)];
        case 'initials':
            return ['Voorletters', $value];
        case 'firstname':
            return ['Voornaam', $value];
        case 'middlename':
            return ['Tussenvoegsel', $value];
        case 'lastname':
            return ['Achternaam', $value];
        case 'gender':
            return ['Geslacht', strtoupper($value)];
        case 'birthdate':
            return ['Geboortedatum', $value];
        case 'email':
            return ['E-mail', $value];
        case 'phone':
            return ['Telefoon', $value];
        case 'phone_mobile':
            return ['Mobiel', $value];
        case 'country':
            return ['Land', $value];
        case 'zipcode':
            return ['Postcode', $value];
        case 'housenumber':
            return ['Huisnummer', $value];
        case 'housenumber_suffix':
            return ['Huisnummertoevoeging', $value];
        case 'street':
            return ['Straat', $value];
        case 'city':
            return ['Plaats', $value];
        case 'contribution':
            return ['Bijdrage', number_format($value, 2, ',', '.')];
        case 'bank_account':
            return ['IBAN', $value];
        case 'payment_method':
            return ['Betaalwijze', ucfirst($value)];
        case 'welcome_present_sp':
            return ['Welkomstcadeau SP', _spaanmelden_get_gift_internal_name($value)];
        case 'welcome_present_rood':
            return ['Welkomstcadeau ROOD', _spaanmelden_get_gift_internal_name($value)];
        case 'source':
            return ['Bron', $value];
        case 'created':
            return ['Aangemeld', $value ? date('d-m-Y H:i:s', $value) : '-'];
        case 'flags':
            if($value)
                return ['Type', $value == 'INTERN' ? '<em>Interne aanmelding</em>' : ''];
            return [null, null];
        case 'verified':
            return ['Bevestigd', $value ? date('d-m-Y H:i:s', $value) : '-'];
        case 'reminded':
            return ['Herinnerd', $value ? date('d-m-Y H:i:s', $value) : '-'];
        case 'submitted':
            return ['Toegevoegd', $value ? date('d-m-Y H:i:s', $value) : '-'];
        case 'contact_id':
            if($value > 0 && !$activity)
                return ['CiviCRM-ID', $value . '&nbsp;&nbsp;&nbsp; <a href="' . variable_get('spciviapi_civicrm_server') . '/civicrm/contact/view?reset=1&cid=' . $value . '">Bekijk contact in CiviCRM</a>'];
            return [null, null];
    }
}
